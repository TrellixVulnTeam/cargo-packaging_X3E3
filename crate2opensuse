#!/usr/bin/env python
#
# crate2opensuse
#
# Tools for packaging crates for openSUSE
#
# Copyright (c) 2016 Kristoffer Gronlund
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys
import json
import cargoapi

_commands = {}


def command(fn):
    _commands[fn.__name__] = fn
    return None


def args_parser():
    epilog = "Commands: %s" % (", ".join(_commands.keys()))
    parser = argparse.ArgumentParser(description='RPM Builder for Cargo crates', epilog=epilog)
    parser.add_argument('-s', '--suffix', type=str, default="",
                        help="Version suffix for packaging multiple versions of a crate")
    parser.add_argument('command', metavar='COMMAND', type=str, help="Sub-command")
    parser.add_argument('name', metavar='NAME', type=str, help="Crate name")
    parser.add_argument('version', metavar='VERSION', type=str, nargs='?', help="Crate version")
    return parser


@command
def mkpac(args):
    """
    Create a new RPM package for the crate.
    Version is optional, newest version will be used if not given.
    """
    pass


@command
def update(args):
    """
    Update an RPM package to the latest released version of the crate.
    """
    pass


@command
def versions(args):
    """
    List available versions of a crate.
    """
    meta = cargoapi.fetch_crate_metadata(args.name)
    for version in meta["versions"]:
        print(version["num"])


@command
def metadata(args):
    """
    Print JSON metadata for a crate.
    """
    print(json.dumps(cargoapi.fetch_crate_metadata(args.name)))

@command
def crate(args):
    """
    Download and save the crate tarball for a specific crate and version.
    """
    if args.version is None:
        raise ValueError("Expected VERSION")
    with open("%s-%s.crate" % (args.name, args.version), "w") as f:
        f.write(cargoapi.download_crate(args.name, args.version))


if __name__ == "__main__":
    parser = args_parser()
    args = parser.parse_args()

    if args.command not in _commands:
        parser.print_help()
    else:
        try:
            _commands[args.command](args)
        except ValueError as e:
            print >>sys.stderr, "Error: %s" % (e)
            sys.exit(1)
        except IOError as e:
            print >>sys.stderr, "Error: %s" % (e)
            sys.exit(1)
